/*
 * Copyright (c) 2016, Regents of the University of California
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * IOTAUTH_COPYRIGHT_VERSION_1
 */

/**
 * Common file for example client and server entities.
 * @author Hokeun Kim
 */

"use strict";

// local variables
var SESSION_CIPHER_ALGO = 'AES-128-CBC';

var HS_NONCE_SIZE = 8;            // handshake nonce size

var SESSION_HASH_ALGO = 'SHA256';
var SEQ_NUM_SIZE = 8;

var crypto = require('crypto');
var net = require('net');
var fs = require('fs');
var util = require('util');
var dgram = require('dgram');

var sleep =require('sleep');        // for testing

var common = require('common');

var msgType = {
    AUTH_HELLO: 0,
    ENTITY_HELLO: 1,
    AUTH_SESSION_KEY_REQ: 10,
    AUTH_SESSION_KEY_RESP: 11,
    SESSION_KEY_REQ_IN_PUB_ENC: 20,
    SESSION_KEY_RESP_WITH_DIST_KEY: 21,    // Includes distribution message (session keys)
    SESSION_KEY_REQ: 22,        // Distribution message
    SESSION_KEY_RESP: 23,        // Distribution message
    SKEY_HANDSHAKE_1: 30,
    SKEY_HANDSHAKE_2: 31,
    SKEY_HANDSHAKE_3: 32,
    SECURE_COMM_MSG: 33,
    FIN_SECURE_COMM: 34,
    SECURE_PUB: 40,
    AUTH_ALERT: 100
};

exports.msgType = msgType;

// encryption and decryption for session messages
var encryptSessionMessage = function(buf, sessionKeyVal) {
    return common.symmetricEncryptWithHash(buf, sessionKeyVal,
        SESSION_CIPHER_ALGO, SESSION_HASH_ALGO);
};

var decryptSessionMessage = function(buf, sessionKeyVal) {
    var ret = common.symmetricDecryptWithHash(buf, sessionKeyVal,
        SESSION_CIPHER_ALGO, SESSION_HASH_ALGO);

    if (!ret.hashOk) {
        console.log('Error: session message digest does not match!')
        return;
    }

    return ret.data;
};

// generate handshake nonce
var generateHSNonce = function() {
    return crypto.randomBytes(HS_NONCE_SIZE);
};

/*
    Handshake Format
    {
        indicator: /UInt8/, // ind[0] = nonce?, ind[1] = replyNonce?, ind[2] = dhParam?
        nonce: /Buffer/, // encrypted, may be undefined
        replyNonce: /Buffer/, // encrypted, may be undefined,
        dhParam: /Buffer/, // Diffie-Hellman parameter (optional)
    }
*/
var serializeHandshake = function(obj) {
    if (obj.nonce == undefined && obj.replyNonce == undefined) {
        console.log('Error: handshake should include at least on nonce.');
        return;
    }

    var buf = new Buffer(1 + HS_NONCE_SIZE * 2);

    // indicates existance of nonces
    var indicator = 0;
    if (obj.nonce != undefined) {
        indicator += 1;
        obj.nonce.copy(buf, 1);
    }
    if (obj.replyNonce != undefined) {
        indicator += 2;
        obj.replyNonce.copy(buf, 1 + HS_NONCE_SIZE);
    }
    if (obj.dhParam != undefined) {
        indicator += 4;
        buf = Buffer.concat([buf, obj.dhParam]);
    }

    buf.writeUInt8(indicator, 0);

    return buf;
};

// buf should be just the unencrypted part
var parseHandshake = function(buf) {
    var obj = {};
    var indicator = buf.readUInt8(0);
    if ((indicator & 1) != 0) {
        // nonce exists
        obj.nonce = buf.slice(1, 1 + HS_NONCE_SIZE);
    }
    if ((indicator & 2) != 0) {
        // replayNonce exists
        obj.replyNonce = buf.slice(1 + HS_NONCE_SIZE, 1 + HS_NONCE_SIZE * 2);
    }
    if ((indicator & 4) != 0) {
        obj.dhParam = buf.slice(1 + HS_NONCE_SIZE * 2);
    }
    return obj;
};

/*
    SecureSessionMessage Format
    {
        SeqNum: /Buffer/, // UIntBE, SEQ_NUM_SIZE Bytes
        data: /Buffer/,
    }
*/
var serializeEncryptSessionMessage = function(obj, sessionKeyVal) {
    if (obj.seqNum == undefined || obj.data == undefined) {
        console.log('Error: Secure session message seqNum or data is missing.');
        return;
    }
    var seqNumBuf = new Buffer(SEQ_NUM_SIZE);
    seqNumBuf.writeUIntBE(obj.seqNum, 0, SEQ_NUM_SIZE);
    var buf = Buffer.concat([seqNumBuf, obj.data]);
    return encryptSessionMessage(buf, sessionKeyVal);
};

var parseDecryptSessionMessage = function(buf, sessionKeyVal) {
        var decBuf = decryptSessionMessage(buf, sessionKeyVal);
        var seqNum = decBuf.readUIntBE(0, SEQ_NUM_SIZE);
        var data = decBuf.slice(SEQ_NUM_SIZE);
        return {seqNum: seqNum, data: data};
};

var parseSessionMessage = function(buf) {
        var seqNum = buf.readUIntBE(0, SEQ_NUM_SIZE);
        var data = buf.slice(SEQ_NUM_SIZE);
        return {seqNum: seqNum, data: data};
};
 
exports.parseTimePeriod = function(str) {
    str = str.replace(/sec/gi, '1000');
    str = str.replace(/min/gi, '1000*60');
    str = str.replace(/hour/gi, '1000*60*60');
    str = str.replace(/day/gi, '1000*60*60*24');
    str = str.replace(/week/gi, '1000*60*60*24*7');
    return eval(str);
};

/*
    SecureMqtt Format
    {
        keyId: /UIntBE/, // S_KEY_ID_SIZE Bytes - in plain text
        seqNum: /UIntBE/, SEQ_NUM_SIZE Bytes - encrypted
        data: /Buffer/, // data - encrypted
    }
*/
exports.encryptSerializeSecureqMqtt = function(obj, sessionKey) {
    if (obj.seqNum == undefined || obj.data == undefined) {
        console.log('Error: SecureMqtt seqNum or data is missing.');
        return;
    }
    var seqNumBuf = new Buffer(SEQ_NUM_SIZE);
    seqNumBuf.writeUIntBE(obj.seqNum, 0, SEQ_NUM_SIZE);
    var buf = Buffer.concat([seqNumBuf, obj.data]);
    var encBuf = encryptSessionMessage(buf, sessionKey.val);
    var keyIdBuf = new Buffer(common.S_KEY_ID_SIZE);
    keyIdBuf.writeUIntBE(sessionKey.id, 0, common.S_KEY_ID_SIZE);

    var buf = common.serializeIoTSP({
        msgType: msgType.SECURE_PUB,
        payload: Buffer.concat([keyIdBuf, encBuf])
    });

    return buf;
}

exports.parseDecryptSecureMqtt = function(buf, sessionKeyList) {
    var keyId = buf.readUIntBE(0, common.S_KEY_ID_SIZE);
    // find id
    for (var i = 0; i < sessionKeyList.length; i++) {
        if (sessionKeyList[i].id == keyId) {
            var decBuf = decryptSessionMessage(buf.slice(common.S_KEY_ID_SIZE),
                sessionKeyList[i].val);
            var seqNum = decBuf.readUIntBE(0, SEQ_NUM_SIZE);
            var data = decBuf.slice(SEQ_NUM_SIZE);
            return {seqNum: seqNum, data:data};
        }
    }
    console.log('cannot find the session key id: ' + keyId);
}

///////////////////////////////////////////////////////////////////
////           Functions for accessing Auth service            ////

/*
helperOptions = {
    msgType,
    payload,
    onWrite,
    onEnd,
    myNonce
}
*/
/*
ret = {
    success,
    myNonce
}
*/
function sendSessionKeyReqHelper(helperOptions, options, sessionKeyRespHandler, callbackParams) {
    if (helperOptions.msgType == msgType.AUTH_HELLO) {
        console.log('received auth hello!');
        var obj = common.parseAuthHello(helperOptions.payload);
        console.log(obj);
        helperOptions.myNonce = common.generateAuthNonce();

        var sessionKeyReq = {
            nonce: helperOptions.myNonce,
            replyNonce: obj.nonce,
            numKeys: options.numKeysPerRequest,
            sender: options.entityName,
            purpose: options.purpose
        };

        var msg;
        if (options.distributionKey == null || options.distributionKey.absValidity < new Date()) {
            if (options.distributionKey != null) {
                console.log('current distribution key expired, '
                    + 'requesting new distribution key as well...');
            }
            var sessionKeyReqBuf = common.serializeSessionKeyReq(sessionKeyReq);
            msg = {
                msgType: msgType.SESSION_KEY_REQ_IN_PUB_ENC,
                payload: common.publicEncryptAndSign(
                    sessionKeyReqBuf, options.authPublicKey, options.entityPrivateKey)
            };
            // TEST: generating error in signature
            //msg.payload.writeUInt8(12, msg.payload.length - 12);
        }
        else {
            msg = {
                msgType: msgType.SESSION_KEY_REQ,
                payload: common.serializeSessionKeyReqWithDistributionKey(options.entityName,
                    sessionKeyReq, options.distributionKey.val)
            };
        }
        
        var buf = common.serializeIoTSP(msg);
        helperOptions.onWrite(buf);
    }
    else if (helperOptions.msgType == msgType.SESSION_KEY_RESP_WITH_DIST_KEY) {
        console.log('received session key response with distribution key attached!');

        var distributionKeyBuf = helperOptions.payload.slice(0, common.getPublicEncryptedAndSignedMessageSize());
        var sessionKeyBuf = helperOptions.payload.slice(common.getPublicEncryptedAndSignedMessageSize());

        var ret = common.verifySignedData(distributionKeyBuf, options.authPublicKey);
        if (!ret.verified) {
            return {success: false, error: 'auth signature NOT verified'};
        }
        console.log('auth signature verified');
        var decBuf = common.privateDecrypt(ret.buf, options.entityPrivateKey);
        var receivedDistKey = common.parseDistributionKey(decBuf);

        decBuf = common.decryptDistributionMessage(sessionKeyBuf, receivedDistKey.val);

        var sessionKeyResp = common.parseSessionKeyResp(decBuf);
        console.log('replyNonce in sessionKeyResp: ' + util.inspect(sessionKeyResp.replyNonce));
        if (!helperOptions.myNonce.equals(sessionKeyResp.replyNonce)) {
            return {success: false, error: 'auth nonce NOT verified'};
        }
        console.log('auth nonce verified');

        sessionKeyRespHandler(sessionKeyResp.sessionKeyList, receivedDistKey, callbackParams);
        helperOptions.onEnd();
    }
    else if (helperOptions.msgType == msgType.SESSION_KEY_RESP) {
        console.log('received session key response encrypted with distribution key');

        var decBuf = common.decryptDistributionMessage(helperOptions.payload, options.distributionKey.val);

        var sessionKeyResp = common.parseSessionKeyResp(decBuf);
        console.log('replyNonce in sessionKeyResp: ' + util.inspect(sessionKeyResp.replyNonce));
        if (!helperOptions.myNonce.equals(sessionKeyResp.replyNonce)) {
            return {success: false, error: 'auth nonce NOT verified'};
        }
        console.log('auth nonce verified');

        sessionKeyRespHandler(sessionKeyResp.sessionKeyList, null, callbackParams);
        helperOptions.onEnd();
    }
    return {success: true, myNonce: helperOptions.myNonce};
};

function sendSessionKeyReqViaTCP(options, sessionKeyRespHandler, callbackParams) {
    var myNonce;
    var expectingMoreData = false;
    var obj;
    var authClientSocket = net.connect({host: options.authHost,port: options.authPort}, 
        function() {
            console.log('connected to auth! from local port ' + authClientSocket.localPort);
    });
    authClientSocket.on('data', function(data) {
        if (!expectingMoreData) {
            obj = common.parseIoTSP(data);
            if (obj.payload.length < obj.payloadLen) {
                expectingMoreData = true;
                console.log('more data will come. current: ' + obj.payload.length
                    + ' expected: ' + obj.payloadLen);
            }
        }
        else {
            obj.payload = Buffer.concat([obj.payload, data]);
            if (obj.payload.length ==  obj.payloadLen) {
                expectingMoreData = false;
            }
            else {
                console.log('more data will come. current: ' + obj.payload.length
                    + ' expected: ' + obj.payloadLen);
            }
        }

        // Test code
        //sleep.sleep(1);

        if (expectingMoreData) {
            // do not process the packet yet
            return;
        }
        else {
            function onEnd() {
                authClientSocket.end();
            }
            function onWrite(buf) {
                authClientSocket.write(buf);
            }
            var helperOptions = {
                msgType: obj.msgType,
                payload: obj.payload,
                onEnd: onEnd,
                onWrite: onWrite,
                myNonce: myNonce
            };
            var ret = sendSessionKeyReqHelper(helperOptions, options, sessionKeyRespHandler, callbackParams);
            if (!ret.success) {
                console.error(ret.error);
                authClientSocket.end();
                return;
            }
            myNonce = ret.myNonce;
        }
    });
    authClientSocket.on('end', function() {
        console.log('disconnected from auth');
    });
};

function sendSessionKeyReqViaUDP(options, sessionKeyRespHandler, callbackParams) {
    var authUdpClientSocket = dgram.createSocket('udp4');
    var myNonce;


    authUdpClientSocket.on('listening', () => {
      var address = authUdpClientSocket.address();
      console.log(`server listening ${address.address}:${address.port}`);
    });

    authUdpClientSocket.on('message', (data, rinfo) => {
        // if it's auth hello?

        console.log('some message received?');
        console.log('Received %d bytes from %s:%d\n',
            data.length, rinfo.address, rinfo.port);

        var obj = common.parseIoTSP(data);
        if (obj.payload.length < obj.payloadLen) {
            expectingMoreData = true;
            console.log('more data will come. current: ' + obj.payload.length
                + ' expected: ' + obj.payloadLen);
        }

        function onEnd() {
            authUdpClientSocket.close();
        }
        function onWrite(buf) {
            authUdpClientSocket.send(buf, 0, buf.length, options.authPort, options.authHost, (err) => {
                //socket.close();
            });
        }

        var helperOptions = {
            msgType: obj.msgType,
            payload: obj.payload,
            onEnd: onEnd,
            onWrite: onWrite,
            myNonce: myNonce
        };
        var ret = sendSessionKeyReqHelper(helperOptions, options, sessionKeyRespHandler, callbackParams);
        if (!ret.success) {
            console.error(ret.error);
            authUdpClientSocket.end();
            return;
        }
        myNonce = ret.myNonce;
    });

    authUdpClientSocket.bind();

    var entityHello = new Buffer(1);
    entityHello.writeUInt8(msgType.ENTITY_HELLO);

    authUdpClientSocket.send(entityHello, 0, entityHello.length, options.authPort, options.authHost, (err) => {
        //socket.close();
    });

};

/*
options = {
    authHost,
    authPort,
    entityName,
    numKeysPerRequest,
    purpose,
    distProtocol,
    distributionKey = {val, absValidity},
    distributionCryptoSpec,
    publicKeyCryptoSpec,
    authPublicKey,
    entityPrivateKey
}
*/
exports.sendSessionKeyReq = function(options, sessionKeyRespHandler, callbackParams) {
    console.log('Distribution protocol: ' + options.distProtocol);
    if (options.distProtocol === 'TCP') {
        sendSessionKeyReqViaTCP(options, sessionKeyRespHandler, callbackParams);
    }
    else if (options.distProtocol === 'UDP') {
        sendSessionKeyReqViaUDP(options, sessionKeyRespHandler, callbackParams);
    }
    else {
        console.error('Unknown distribution protocol!');
    }
};

exports.loadEntityConfig = function(inputFileName) {
    console.log('loading from config file: ' + inputFileName);
    var fileLines = fs.readFileSync(inputFileName, 'utf8').split('\n');
    var fileString = "";
    for (var i = 0; i < fileLines.length; i++) {
        var line = fileLines[i].trim();
        if (line.startsWith('//') || line.length == 0) {
            continue;
        }
        fileString += line;
    }
    var entityConfig = JSON.parse(fileString);
    if (entityConfig.entityInfo.usePermanentDistKey) {
        entityConfig.entityInfo.permanentDistKey = fs.readFileSync(entityConfig.entityInfo.permanentDistKey);
    }
    else {
        entityConfig.entityInfo.privateKey = fs.readFileSync(entityConfig.entityInfo.privateKey);
        entityConfig.authInfo.publicKey = fs.readFileSync(entityConfig.authInfo.publicKey);
    }
    return entityConfig;
};


///////////////////////////////////////////////////////////////////
////     Common socket class for entity server and client      ////

var IoTSecureSocket = function(socket, sessionKey, sessionCryptoSpec) {
    this.socket = socket;
    this.sessionKey = sessionKey;
    this.sessionCryptoSpec = sessionCryptoSpec;
    this.writeSeqNum = 0;
    this.readSeqNum = 0;
};

IoTSecureSocket.prototype.close = function() {
    if (this.socket) {
        this.socket.end();
    }
    this.socket = null;
};

IoTSecureSocket.prototype.checkSessionKeyValidity = function() {
    if (this.sessionKey.absValidity > new Date()) {
        return true;
    }
    return false;
};

// to be called from outside of iotAuth module
IoTSecureSocket.prototype.send = function(data) {
    if (!this.socket) {
        console.log('Internal socket is not available');
        return false;
    }
    if (!this.checkSessionKeyValidity()) {
        console.log('Session key expired!');
        return false;
    }
    var enc = serializeEncryptSessionMessage(
        {seqNum: this.writeSeqNum, data: data}, this.sessionKey.val);
    this.writeSeqNum++;
    var buf = common.serializeIoTSP({
        msgType: msgType.SECURE_COMM_MSG,
        payload: enc
    });
    this.socket.write(buf);
    return true;
};

// to be called inside of iotAuth module
IoTSecureSocket.prototype.receive = function(payload) {
    if (!this.socket) {
        return {success: false, error: 'Internal socket is not available'};
    }
    if (!this.checkSessionKeyValidity()) {
        return {success: false, error: 'Session key expired!'};
    }

    var ret = common.symmetricDecryptWithHash(payload, this.sessionKey.val,
        this.sessionCryptoSpec.cipher, this.sessionCryptoSpec.hash);

    if (!ret.hashOk) {
        return {success: false, error: 'Received hash for secure comm msg is NOT ok'};
    }
    console.log('Received hash for secure comm msg is ok');

    ret = parseSessionMessage(ret.data);
    
    if (ret.seqNum != this.readSeqNum) {
        return {success: false, error: 'seqNum does not match! expected: ' + this.readSeqNum + ' received: ' + ret.seqNum};
    }
    this.readSeqNum++;
    console.log('Received seqNum: ' + ret.seqNum);
    return {success: true, data: ret.data};
};

IoTSecureSocket.prototype.inspect = function() {
    var ret = 'sessionKey: ' + this.sessionKey.toString();
    ret += ' writeSeqNum: '+ this.writeSeqNum;
    ret += ' readSeqNum: '+ this.readSeqNum;
    return ret;
};

///////////////////////////////////////////////////////////////////
////                Functions for entity client                ////

/*
options = {
    serverHost,
    serverPort,
    sessionKey = {val, absValidity},
    sessionCryptoSpec
}
*/
/*
eventHandlers = {
    onClose,
    onError,
    onData,
    onConnection
}
*/
exports.initializeSecureCommunication = function(options, eventHandlers) {
    if (options.sessionKey == null) {
        eventHandlers.onError('Comm init failed: No available key');
        return;
    }
    // client communication state
    var entityClientCommState = {
        IDLE: 0,
        HANDSHAKE_1_SENT: 10,
        IN_COMM: 30                    // Session message
    };
    var entityClientState = entityClientCommState.IDLE;
/*
    if (sessionKeyCacheForServers.length == 0) {
        console.log('No available key for servers!');
        return;
    }
*/
    // per connection information
    console.log('chosen commSessionKey: ');
    console.log(options.sessionKey);
    console.log('options');
    console.log(options);
    var myNonce;

    var entityClientSocket = net.connect({host:options.serverHost, port: options.serverPort},
        function() {
            //console.log('connected to ' + commServerInfo.name + '(' + commServerInfo.host
            //    + ':' + commServerInfo.port + ')! from local port ' + entityClientSocket.localPort);

            myNonce = generateHSNonce();
            console.log('chosen nonce: ' + myNonce.inspect());

            var handshake1 = {nonce: myNonce};
            var buf = serializeHandshake(handshake1);
            var enc = encryptSessionMessage(buf, options.sessionKey.val);
            var keyIdBuf = new Buffer(common.S_KEY_ID_SIZE);
            keyIdBuf.writeUIntBE(options.sessionKey.id, 0, common.S_KEY_ID_SIZE);

            var msg = {
                msgType: msgType.SKEY_HANDSHAKE_1,
                payload: Buffer.concat([keyIdBuf, enc])
            };
            entityClientSocket.write(common.serializeIoTSP(msg));

            console.log('switching to HANDSHAKE_1_SENT');
            entityClientState = entityClientCommState.HANDSHAKE_1_SENT;
    });

    var expectingMoreData = false;
    var obj;
    var iotSecureSocket = null;
    entityClientSocket.on('data', function(data) {
        if (!expectingMoreData) {
            obj = common.parseIoTSP(data);
            if (obj.payload.length < obj.payloadLen) {
                expectingMoreData = true;
                console.log('more data will come. current: ' + obj.payload.length
                    + ' expected: ' + obj.payloadLen);
            }
        }
        else {
            obj.payload = Buffer.concat([obj.payload, data]);
            if (obj.payload.length ==  obj.payloadLen) {
                expectingMoreData = false;
            }
            else {
                console.log('more data will come. current: ' + obj.payload.length
                    + ' expected: ' + obj.payloadLen);
            }
        }

        if (expectingMoreData) {
            // do not process the packet yet
            return;
        }
        else if (obj.msgType == msgType.SKEY_HANDSHAKE_2) {
            console.log('received session key handshake2!');
            if (entityClientState != entityClientCommState.HANDSHAKE_1_SENT) {
                console.log('Error: wrong sequence of handshake, disconnecting...');
                entityClientState = entityClientCommState.IDLE;
                entityClientSocket.end();
                return;
            }

            var buf = decryptSessionMessage(obj.payload, options.sessionKey.val);
            var ret = parseHandshake(buf);
            console.log(ret);

            if (myNonce.equals(ret.replyNonce)) {
                console.log('server authenticated/authorized by solving nonce!');
            }
            else {
                console.log('Error: server NOT verified, nonce NOT matched, disconnecting...');
                entityClientState = entityClientCommState.IDLE;
                entityClientSocket.end();
                return;
            }

            var theirNonce = ret.nonce;
            var handshake3 = {replyNonce: theirNonce};

            buf = serializeHandshake(handshake3);
            var enc = encryptSessionMessage(buf, options.sessionKey.val);

            var msg = {
                msgType: msgType.SKEY_HANDSHAKE_3,
                payload: enc
            };
            entityClientSocket.write(common.serializeIoTSP(msg));

            console.log('switching to IN_COMM');

            iotSecureSocket = new IoTSecureSocket(entityClientSocket, options.sessionKey, options.sessionCryptoSpec);
            eventHandlers.onConnection(iotSecureSocket);

            entityClientState = entityClientCommState.IN_COMM;
        }
        else if (obj.msgType == msgType.SECURE_COMM_MSG) {
            console.log('received secure communication message!');
            if (entityClientState == entityClientCommState.IN_COMM) {
                var ret = iotSecureSocket.receive(obj.payload);
                if (!ret.success) {
                    eventHandlers.onError(ret.error);
                    return;
                }
                eventHandlers.onData(ret.data);
                return;
            }
            else {
                options.onError('Error: it is not in IN_COMM state, disconecting...');
                entityClientState = entityClientCommState.IDLE;
                entityClientSocket.end();
                return;
            }

            var ret = parseDecryptSessionMessage(obj.payload, options.sessionKey.val);
            if (ret.seqNum != readSeqNum) {
                console.log('seqNum does not match! expected: ' + readSeqNum + ' received: ' + ret.seqNum);
            }
            readSeqNum++;
            if (ret.data.length > 65535) {
                console.log('seqNum: ' + ret.seqNum);
                console.log('data is too large to display, to store in file use saveData command');
                tempLargeDataBuf = ret.data;
            }
            else {
                console.log('seqNum: ' + ret.seqNum + ' data: ' + ret.data.toString());
            }
        }
    });

    entityClientSocket.on('end', function() {
        if (entityClientState == entityClientCommState.IN_COMM) {
            eventHandlers.onClose();
            return;
        }
        eventHandlers.onError('Comm init failed: disconnected from server during communication initialization.' +
            options.serverHost + ':' + options.serverport);
        entityClientState = entityClientCommState.IDLE;
    });
    entityClientSocket.on('error', function(message) {
        if (entityClientState == entityClientCommState.IN_COMM) {
            eventHandlers.onError(message);
            return;
        }
        eventHandlers.onError('Comm init failed: Error in comm init - details: ' + message);
        entityClientSocket.end();
        return;
    });
};

///////////////////////////////////////////////////////////////////
////                Functions for entity server                ////

/*
options = {
    serverPort,
    sessionCryptoSpec
}
*/
/*
eventHandlers = {
    onServerError,      // for server
    onServerListening,
    onClientRequest,    // for client's communication initialization request

    onClose,            // for individual sockets
    onError,
    onData,
    onConnection
}
*/

exports.initializeSecureServer = function(options, eventHandlers) {
    var entityServerCommState = {
        IDLE: 0,
        WAITING_SESSION_KEY: 20,
        HANDSHAKE_1_RECEIVED: 21,
        HANDSHAKE_2_SENT: 22,
        IN_COMM: 30                    // Session message
    };

    var connectionCount = 0;
    var entityServer = net.createServer(function(entityServerSocket) {
        console.log('Unidentified client connected');
        entityServerSocket.on('end', function() {
            console.log('Unidentified client disconnected');
        });

        var entityServerState = entityServerCommState.IDLE;
        var myNonce;
        var entityServerSessionKey;
        var socketID = -1;

        function sendHandshake2(handshake1Payload, serverSocket, sessionKey) {
            if (entityServerState != entityServerCommState.HANDSHAKE_1_RECEIVED) {
                eventHandlers.onServerError('Error during comm init - in wrong state, expected: HANDSHAKE_1_RECEIVED, disconnecting...');
                serverSocket.close();
                return;
            }

            var enc = handshake1Payload.slice(common.S_KEY_ID_SIZE);
            entityServerSessionKey = sessionKey;

            var buf = decryptSessionMessage(enc, entityServerSessionKey.val);

            var ret = parseHandshake(buf);
            var theirNonce = ret.nonce;

            console.log(ret);

            myNonce = generateHSNonce();
            console.log('chosen nonce: ' + myNonce.inspect());
            var handshake2 = {nonce: myNonce, replyNonce: theirNonce};
            buf = serializeHandshake(handshake2);
            enc = encryptSessionMessage(buf, entityServerSessionKey.val);
            var msg = {
                msgType: msgType.SKEY_HANDSHAKE_2,
                payload: enc
            };
            entityServerSocket.write(common.serializeIoTSP(msg));
            console.log('switching to HANDSHAKE_2_SENT');
            entityServerState = entityServerCommState.HANDSHAKE_2_SENT;
        };

        entityServerSocket.on('end', function() {
            if (entityServerState == entityServerCommState.IN_COMM) {
                eventHandlers.onClose(socketID);
                return;
            }
            else {
                eventHandlers.onServerError('Closed during comm init from ' +
                    entityServerSocket.remoteAddress + ':' + entityServerSocket.remotePort);
                return;
            }
        });
        
        entityServerSocket.on('error', function(message) {
            if (entityServerState == entityServerCommState.IN_COMM) {
                eventHandlers.onError(message, socketID);
                return;
            }
            else {
                eventHandlers.onServerError('Error during comm init, details: ' + message);
                return;
            }
        });

        var obj;
        var expectingMoreData = false;
        var iotSecureSocket = null;
        entityServerSocket.on('data', function(data) {
            if (!expectingMoreData) {
                obj = common.parseIoTSP(data);
                if (obj.payload.length < obj.payloadLen) {
                    expectingMoreData = true;
                    console.log('more data will come. current: ' + obj.payload.length
                        + ' expected: ' + obj.payloadLen);
                }
            }
            else {
                obj.payload = Buffer.concat([obj.payload, data]);
                if (obj.payload.length ==  obj.payloadLen) {
                    expectingMoreData = false;
                }
                else {
                    console.log('more data will come. current: ' + obj.payload.length
                        + ' expected: ' + obj.payloadLen);
                }
            }

            if (expectingMoreData) {
                // do not process the packet yet
                return;
            }
            else if (obj.msgType == msgType.SKEY_HANDSHAKE_1) {
                console.log('received session key handshake1');
                if (entityServerState != entityServerCommState.IDLE) {
                    eventHandlers.onServerError('Error during comm init - in wrong state, expected: IDLE, disconnecting...');
                    entityServerSocket.close();
                    return;
                }
                console.log('switching to HANDSHAKE_1_RECEIVED state.');
                entityServerState = entityServerCommState.HANDSHAKE_1_RECEIVED;
                eventHandlers.onClientRequest(obj.payload, entityServerSocket, sendHandshake2);
            }
            else if (obj.msgType == msgType.SKEY_HANDSHAKE_3) {
                console.log('received session key handshake3!');
                if (entityServerState != entityServerCommState.HANDSHAKE_2_SENT) {
                    console.log('Error: wrong sequence of handshake, disconnecting...');
                    entityServerState = entityServerCommState.IDLE;
                    entityServerSocket.end();
                    return;
                }
                var buf = decryptSessionMessage(obj.payload, entityServerSessionKey.val);
                var ret = parseHandshake(buf);
                console.log(ret);

                if (myNonce.equals(ret.replyNonce)) {
                    console.log('client authenticated/authorized by solving nonce!');
                }
                else {
                    console.log('Error: client NOT verified, nonce NOT matched, disconnecting...');
                    entityServerState = entityServerCommState.IDLE;
                    entityServerSocket.end();
                    return;
                }

                console.log('switching to IN_COMM');
                entityServerState = entityServerCommState.IN_COMM;
                iotSecureSocket = new IoTSecureSocket(entityServerSocket, entityServerSessionKey,
                    options.sessionCryptoSpec);
                socketID = connectionCount++;

                var socketInstance = {
                    'id': socketID,
                    'remoteAddress': entityServerSocket.remoteAddress + ':' + entityServerSocket.remotePort,
                    'status': 'open'
                };
                eventHandlers.onConnection(socketInstance, iotSecureSocket);
            }
            else if (obj.msgType == msgType.SECURE_COMM_MSG) {
                console.log('received secure communication!');
                if (entityServerState != entityServerCommState.IN_COMM) {
                    console.log('Error: it is not in IN_COMM state, disconecting...');
                    entityServerState = entityServerCommState.IDLE;
                    entityServerSocket.end();
                    return;
                }
                var ret = iotSecureSocket.receive(obj.payload);
                if (!ret.success) {
                    eventHandlers.onError(ret.error, socketID);
                    return;
                }
                eventHandlers.onData(ret.data, socketID);
            }
        });
    });
    entityServer.on('error', function(message) {
        eventHandlers.onServerError(message);
    });
    entityServer.listen(options.serverPort, eventHandlers.onServerListening);
};
